{% extends "market/_layouts/cp" %}

{% set crumbs = [
    { label: "Promotions"|t, url: url('market/promotions') },
    { label: "Discounts"|t, url: url('market/promotions/discounts') },
] %}

{% import "_includes/forms" as forms %}
{% import "market/_includes/forms/marketForms" as marketForms %}

{% set content %}
<form method="post" accept-charset="UTF-8" data-saveshortcut>
    <input type="hidden" name="action" value="market/discount/save">
    <input type="hidden" name="redirect" value="market/promotions/discounts">

    {{ getCsrfInput() }}
    {% if discount.id %}<input type="hidden" name="id" value="{{ discount.id }}">{% endif %}

    {% set tabs = {
        0: {'label':'Discount','url':'#discount'},
        1: {'label':'Conditions','url':'#conditions'},
        2: {'label':'Actions','url':'#actions'}
        }
    %}

    <div id="discount">
    {{ forms.textField({
        first: true,
        label: "Name"|t,
        instructions: "What this discount will be called in the CP."|t,
        id: 'name',
        name: 'name',
        value: discount.name,
        errors: discount.getErrors('name'),
        autofocus: true,
        required: true,
    }) }}

    {{ forms.textField({
        label: "Description"|t,
        instructions: "Discount description."|t,
        id: 'description',
        name: 'description',
        value: discount.description,
        errors: discount.getErrors('description'),
    }) }}

    {{ forms.checkboxField({
        label: "Enabled"|t,
        instructions: "Is it active?"|t,
        id: 'enabled',
        name: 'enabled',
        value: 1,
        checked: discount.enabled,
        errors: discount.getErrors('enabled')
    }) }}

    </div>
    <div id="conditions" class="hidden">
    {{ forms.textField({
        label: "Coupon Code"|t,
        instructions: "A user will have to enter it to activate this discount."|t,
        id: 'code',
        name: 'code',
        value: discount.code,
        errors: discount.getErrors('code'),
    }) }}

    {{ marketForms.numberField({
        label: "Per User Limit"|t,
        instructions: "How many times one user is allowed to use this discount. Set zero for unlimit use"|t,
        id: 'perUserLimit',
        name: 'perUserLimit',
        value: discount.perUserLimit,
        min: '0',
        errors: discount.getErrors('perUserLimit'),
    }) }}

    {{ marketForms.numberField({
        label: "Total Use Limit"|t,
        instructions: "How many times this discount can be used. Set zero for unlimited use"|t,
        id: 'totalUseLimit',
        name: 'totalUseLimit',
        value: discount.totalUseLimit,
        min: '0',
        errors: discount.getErrors('totalUseLimit'),
    }) }}

    {{
        forms.field({
            'label': 'Times used'|t
        }, '<input disabled value="' ~ discount.totalUses ~ ' times" />')
    }}

    {{ forms.dateField({
        label: "Start Date"|t,
        instructions: "Date from which the discount will be active. Leave blank for unlimited start date"|t,
        id: 'dateFrom',
        name: 'dateFrom',
        value: discount.dateFrom,
        errors: discount.getErrors('dateFrom'),
    }) }}

    {{ forms.dateField({
        label: "End Date"|t,
        instructions: "Date when the discount will be finished. Leave blank for unlimited end date"|t,
        id: 'dateTo',
        name: 'dateTo',
        value: discount.dateTo,
        errors: discount.getErrors('dateTo'),
    }) }}

    {{ forms.multiselectField({
        label: 'Groups'|t,
        instructions: "Groups for which this discount will be applicable to. Leave blank for all groups"|t,
        id: 'groups',
        name: 'groups',
        options: groups,
        values: discount.getGroupsIds(),
        errors: discount.getErrors('groups'),
    }) }}

    {{ forms.multiselectField({
        label: 'Product Types'|t,
        instructions: "Product types for which this discount will be applicable to. Leave blank for all product types"|t,
        id: 'productTypes',
        name: 'productTypes',
        options: types,
        values: discount.getProductTypesIds(),
        errors: discount.getErrors('productTypes'),
    }) }}

    {% set productsField %}
        <a href="#" class="products-modal btn">Choose products <span class="products-counter">
                {{ discount.getProductsIds() ? '(' ~ discount.getProductsIds()|length ~ ')' : '' }}
            </span></a>

        <div class="chosen-products">
            {% for id in discount.getProductsIds() %}
                <input type="hidden" name="products[]" value="{{ id }}">
            {% endfor %}
        </div>

    {% endset %}

    {{ forms.field({
        id:       'products',
        label:    'Products',
        instructions: "Products for which this discount will be applicable to. Leave blank for all products"|t,
        errors: discount.getErrors('products'),
    }, productsField) }}

    {{ forms.textField({
        label: "Purchase Total"|t,
        instructions: "Restrict the discount to only those orders where the customer has purchased a minimum total value of matching items."|t,
        id: 'purchaseTotal',
        name: 'purchaseTotal',
        value: discount.purchaseTotal,
        type: 'number',
        errors: discount.getErrors('purchaseTotal'),
    }) }}

    {{ forms.textField({
        label: "Purchase Quantity"|t,
        instructions: "How many items of a product must be ordered to apply this discount to the product"|t,
        id: 'purchaseQty',
        name: 'purchaseQty',
        value: discount.purchaseQty,
        type: 'number',
        errors: discount.getErrors('purchaseQty'),
    }) }}

    </div>
    <div id="actions" class="hidden">
    {{ marketForms.numberField({
        label: "Base Discount"|t,
        instructions: "Flat value which should be added to the order total price. Write negative number for off-discount"|t,
        id: 'baseDiscount',
        name: 'baseDiscount',
        value: discount.baseDiscount,
        type: 'number',
        step: 'any',
        errors: discount.getErrors('baseDiscount'),
    }) }}

    {{ marketForms.numberField({
        label: "Per Item Discount"|t,
        instructions: "Flat value which should be added to each item in the order. Write negative number for off-discount"|t,
        id: 'perItemDiscount',
        name: 'perItemDiscount',
        value: discount.perItemDiscount,
        type: 'number',
        step: 'any',
        errors: discount.getErrors('perItemDiscount'),
    }) }}

    {{ marketForms.numberField({
        label: "Percent Discount"|t,
        instructions: "Percentile value which should be added to the total order price. Write negative number for off-discount, i.e. -0,04 for 4% off"|t,
        id: 'percentDiscount',
        name: 'percentDiscount',
        value: discount.percentDiscount,
        type: 'number',
        step: 'any',
        errors: discount.getErrors('percentDiscount'),
    }) }}

    {{ forms.checkboxField({
        label: "Exclude If On Sale"|t,
        instructions: "Sets the discount not applicable to the items which on sale"|t,
        id: 'excludeOnSale',
        name: 'excludeOnSale',
        value: 1,
        checked: discount.excludeOnSale,
        errors: discount.getErrors('excludeOnSale')
    }) }}

    {{ forms.checkboxField({
        label: "Free Shipping"|t,
        instructions: "Set shipping price to zero"|t,
        id: 'freeShipping',
        name: 'freeShipping',
        value: 1,
        checked: discount.freeShipping,
        errors: discount.getErrors('freeShipping')
    }) }}


    </div>

    <hr>

    <div class="buttons">
        <input type="submit" class="btn submit" value="{{ 'Save'|t }}">
    </div>
</form>

{% endset %}

{% set js %}
{#<script>#}
$(function() {
    $('#groups, #productTypes').selectize({
        plugins: ['remove_button'],
        dropdownParent: 'body'
    });

    var modal,
        $chosen = $('.chosen-products'),
        $counter = $('.products-counter');

    $('.products-modal').click(function(e) {
        if(modal) {
            modal.show();
        } else {
            window.modal = modal = Craft.createElementSelectorModal('Market_Product', {
                multiSelect: true,
                onSelect: function(products) {
                    $chosen.find('input').remove();
                    for(i in products) {
                        var id = products[i].id;
                        $('<input/>').attr('type', 'hidden').attr('name', 'products[]').val(id).appendTo($chosen);
                        $counter.text('(' + products.length + ')');
                    }
                }
            });
        }
    });
});
{% endset %}
{% includeJs js %}
