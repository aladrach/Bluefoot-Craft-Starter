{% extends "market/_layouts/cp" %}
{% set title = "Product Types"|t %}

{% set crumbs = [
{ label: "Market Settings"|t, url: url('market/settings') },
{ label: "Product Types"|t, url: url('market/settings/producttypes') },
] %}


{% set selectedTab = 'settings' %}
{% import "_includes/forms" as forms %}

{% set content %}
<form method="post" accept-charset="UTF-8" data-saveshortcut>
    <input type="hidden" name="action" value="market/productType/saveProductType">
    <input type="hidden" name="redirect" value="market/settings/producttypes">

    {{ getCsrfInput() }}
    {% if productType.id %}<input type="hidden" name="productTypeId" value="{{ productType.id }}">{% endif %}

    {%  set variantTabHidden = (productType.hasVariants ? '' : 'hidden') %}
    {% set tabs = {
            0: {'label':'Settings','url':'#tab0'},
            'productTab': {'label':'Product Fields','url':'#productTab'},
            'variantTab': {'label':'Variant Fields','url':'#variantTab','class':'variant-settings '~variantTabHidden}
        }
    %}

    <div id="tab0">

    {{ forms.textField({
        first: true,
        label: "Name"|t,
        instructions: "What this product type will be called in the CP."|t,
        id: 'name',
        name: 'name',
        value: productType.name,
        errors: productType.getErrors('name'),
        autofocus: true,
        required: true,
        translatable: true
    }) }}

    {{ forms.textField({
        label: "Handle"|t,
        instructions: "How you’ll refer to this product type in code or templates."|t,
        id: 'handle',
        class: 'code',
        name: 'handle',
        value: productType.handle,
        errors: productType.getErrors('handle'),
        required: true
    }) }}

    {% macro hasVariantsField(productType) %}
        {% from "_includes/forms" import lightswitchField %}

        {{ lightswitchField({
            label: "Products Type has Variants."|t,
            instructions: "One or more items for sale in a single product that differ from each other.",
            id: 'hasVariants',
            name: 'hasVariants',
            on: productType.hasVariants,
            toggle: '.variant-settings'
        }) }}
    {% endmacro %}

    {% macro hasUrlsField(productType) %}
        {% from "_includes/forms" import checkboxField %}

        {{ checkboxField({
            label: "Products of this type have their own URLs"|t,
            id: 'hasUrls',
            name: 'hasUrls',
            checked: productType.hasUrls,
            toggle: 'url-settings'
        }) }}
    {% endmacro %}

    {% macro templateField(productType) %}
        {% from "_includes/forms" import textField %}

        {{ textField({
            label: "Product Template"|t,
            instructions: "The template to use when the products’s URL is requested."|t,
            id: 'template',
            class: 'ltr',
            name: 'template',
            value: productType.template,
            errors: productType.getErrors('template')
        }) }}
    {% endmacro %}


    {% macro fieldOptionsRow(name, handle) %}
        {% from "_includes/forms" import checkboxField %}
        <tr data-id="1" data-name="{{ handle }}Field">
            <th scope="row" data-title="Name">
                {{ name|title }}
            </th>
            <td data-title="Visible">
                {{ checkboxField({
                    label: ""|t,
                    id: 'visible',
                    name: 'fieldOptions['~handle~'][visible]',
                    checked: 1,
                    disabled:lockedVisible|default(false)
                }) }}
            </td>
            <td data-title="Same">
                <span class="variant-settings">
                {{ checkboxField({
                    label: ""|t,
                    id: 'same',
                    name: 'fieldOptions['~handle~'][same]',
                    checked: 1
                }) }}
                </span>
            </td>
        </tr>
    {%  endmacro %}

    {% macro titleFormatField(productType) %}
        {% from "_includes/forms" import textField %}
        <div class="variant-settings {{ (productType.hasVariants ? '' : 'hidden') }}">
        {{ textField({
            label: "Variant Title Format"|t,
            instructions: "What the auto-generated entry titles should look like. You can include tags that output entry properties, such as {sku} or {myCustomField}."|t,
            id: 'titleFormat',
            class: 'ltr',
            name: 'titleFormat',
            value: productType.titleFormat,
            errors: productType.getErrors('titleFormat')
        }) }}
        </div>
    {% endmacro %}




    {% from _self import hasUrlsField, templateField, hasVariantsField, fieldOptionsRow, titleFormatField  %}

    <hr/>
    {{ hasVariantsField(productType) }}
    {{ titleFormatField(productType) }}
    <hr/>

    {{ hasUrlsField(productType) }}


    <div id="url-settings" class="nested-fields{% if not productType.hasUrls %} hidden{% endif %}">
        {{ forms.textField({
            label: "Product Url Format"|t,
            instructions: "What the product URLs should look like. You can include tags that output entry properties, such as {slug} or {publishDate|date(\"Y\")}."|t,
            id: 'urlFormat',
            class: 'code',
            name: 'urlFormat',
            value: productType.urlFormat,
            errors: productType.getErrors('urlFormat')
        }) }}

        {{ templateField(productType) }}
    </div>

    </div>

    <div id="productTab" class="hidden">

    {% include "_includes/fieldlayoutdesigner" with {
    fieldLayout: productType.asa('productFieldLayout').getFieldLayout(),
    } only %}

    </div>

    <div id="variantTab" class="hidden">

    {% include "market/_includes/variantfieldlayoutdesigner" with {
        fieldLayout: productType.asa('variantFieldLayout').getFieldLayout(),
        customizableTabs: false
    } only %}

    </div>

    <hr>

    <div class="buttons">
        <input type="submit" class="btn submit" value="{{ 'Save'|t }}">
    </div>
</form>

{% endset %}

{% set js %}
{% if not productType.handle %}new Craft.HandleGenerator('#name', '#handle');{% endif %}
$(function () {
    $('#type').selectize({
        dropdownParent: 'body'
    });
});
{% endset %}
{% includeJs js %}
